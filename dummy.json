{
    "createdOn": "2025-09-25T13:10:52+01:00",
    "updatedOn": "2025-09-25T13:10:52+01:00",
    "createdBy": 1,
    "updatedBy": 1,
    "revision": null,
    "matterBillId": 1,
    "clientIds": "1",
    "matterId": 1,
    "matterName": null,
    "matterDescription": "matter description",
    "subTotal": 1.3888888888888888,
    "taxTotal": 0.2777777777777778,
    "netTotal": 1.6666666666666665,
    "balance": 1.6666666666666665,
    "paidTotal": 0,
    "invoiceDate": "2025-09-25T00:00:00+01:00",
    "dueDate": "2025-10-25T00:00:00+01:00",
    "paymentDate": null,
    "status": "UNPAID",
    "type": "HOURLY",
    "code": "B/Thu/5027",
    "matterBillingDTOList": [
        {
            "createdOn": "2025-09-25T13:05:12+01:00",
            "updatedOn": "2025-09-25T13:05:12+01:00",
            "createdBy": 1,
            "updatedBy": null,
            "revision": null,
            "matterBillTimeId": 1,
            "matterTimeEntryId": 1,
            "billDate": "2025-09-25T00:00:00+01:00",
            "userId": 1,
            "description": "test matter time entry ",
            "duration": "00:00:05",
            "hourlyRate": 1000,
            "taxId": 1,
            "taxPer": 20,
            "taxAmount": 0.2777777777777778,
            "totalAmount": 1.3888888888888888
        }
    ],
    "matterBillExpenseDTOList": [
        {
            "createdOn": "2025-09-25T13:06:35+01:00",
            "updatedOn": "2025-09-25T13:06:35+01:00",
            "createdBy": 1,
            "updatedBy": null,
            "revision": null,
            "matterBillExpenseId": 1,
            "expEntryId": 1,
            "expDate": "2025-09-25T00:00:00+01:00",
            "userId": 1,
            "description": "Expense entry ",
            "quantity": 1,
            "rate": null,
            "taxId": 1,
            "taxPer": 20,
            "taxAmount": 0,
            "totalAmount": null
        }
    ],
    "matterBillAwardDTOList": null,
    "matterBillServiceItemDTOList": null
}
// =======================================================================================================================================>
// import { Alert, Image, KeyboardAvoidingView, Platform, ScrollView, StyleSheet, Switch, Text, TextInputComponent, TouchableOpacity, View } from 'react-native'
// import React, { useEffect, useState } from 'react'
// import { Formik } from 'formik'
// import * as Yup from 'yup'
// import moment from 'moment'
// import { useDispatch, useSelector } from 'react-redux'
// import DatePicker from 'react-native-date-picker';
// import { useToast } from 'react-native-toast-notifications'
// //icons 
// import AntDesign from 'react-native-vector-icons/AntDesign';
// import ScreenHeader from '../../../../components/ScreenHeader'
// import Wrapper from '../../../../components/Wrapper'
// import MyText from '../../../../components/MyText'
// import TextInputWithTitle from '../../../../components/TextInputWithTitle'
// import { calculatefontSize } from '../../../../helper/responsiveHelper'
// import { COLORS } from '../../../../constants'
// import AddButton from '../../../../components/AddButton'
// import httpRequest from '../../../../api/apiHandler'
// import BottomModalListWithSearch from '../../../../components/BottomModalListWithSearch'
// import ReminderItems from '../../tasks/components/ReminderItems'
// import { addReminderItem } from '../../../../store/slices/taskSlice/createItemforReminder'
// import Loader from '../../../../components/Loader'
// import LoaderKitView from 'react-native-loader-kit'
// import { addTimeEntry, resetTimeEntries } from '../../../../store/slices/billingSlice/createBillingTimeEntryItem'
// import BillingTimeEntry from '../components/BillingTimeEntry'
// import BillingExpenseEntry from '../components/BillingExpenseEntry'
// import { addExpenseEntry, resetExpenseEntries } from '../../../../store/slices/billingSlice/createBillingExpenseEntryItem'
// import { formatNumber, getTotalDuration } from '../../../../helper/Helpers'
// import { addContingencyFee } from '../../../../store/slices/billingSlice/createContingencyFeeEntryItem'
// import ContingencyFeeDetails from '../components/ContigencyFeeDetails'
// import FixedFeeDetails from '../components/FixedFeeDetails'
// import { addFixedFee } from '../../../../store/slices/billingSlice/createFixedFeeDetailItem'
// const EditBilling = ({ navigation, route }) => {
//     const billingDetails = route?.params?.billingDetails
//     const dispatch = useDispatch()
//     const toast = useToast();
//     const [firmUserData, setFirmUserData] = useState([])
//     const items = useSelector(state => state.createBillingTimeEntryItem.items);
//     const expenseEntryItem = useSelector(state => state.createBillingExpenseEntryItem.items);
//     const fixedFeeItem = useSelector(state => state.createFixedFeeDetailItem.items);
//     const contingencyFeeItem = useSelector(state => state.createContingencyFeeEntryItem.items);
//     const userDetails = useSelector(state => state?.userDetails?.userDetails);
//     const [matterData, setmatterData] = React.useState([]);
//     const [eventTypeData, seteventTypeData] = React.useState([]);
//     const [toClientData, setToClientData] = React.useState([]);
//     const [clientId, setClientId] = React.useState("");
//     const [billingData, setBillingData] = React.useState([]);
//     const [toClientLoader, setToClientLoader] = React.useState(false);
//     //
//     const [defaultData, setDefaultData] = useState(billingDetails)
//     const [matterSelected, setMatterSelected] = useState('')
//     ///////new states
//     const [userData, setUserData] = useState([]);
//     const getUserData = async () => {
//         const { res, err } = await httpRequest({
//             method: 'get',
//             path: `/ic/user/?status=Active`,
//             navigation: navigation
//         })
//         if (res) {
//             setUserData(res?.data);
//         }
//         else {
//             console.log(err, "GET USER DATA RES=====================>", res);
//             console.log("errd", err);
//         }
//     }
//     const getDefaultData = async () => {
//         const { res, err } = await httpRequest({
//             method: `get`,
//             path: `/ic/matter/bill/${billingDetails?.matterBillId}`,
//             navigation: navigation
//         })
//         if (res) {
//             console.log(res, "GET TO CLEINT ====================sd===d=fd=d=======d=======>", `/ic/matter/${billingDetails?.matterId}/client`);
//             setDefaultData(res?.data);
//             setClientId(res?.data?.clientIds)
//             // contigency fee dispatched 
//             if (res?.data?.matterBillAwardDTOList?.length > 0) {
//                 res?.data?.matterBillAwardDTOList?.forEach(item => {
//                     console.log(item, "item for contigency ====d============================");
//                     dispatch(addContingencyFee({
//                         id: Math.floor(Math.random() * 100000),
//                         date: moment(item?.billDate).format('YYYY-MM-DD') || '',
//                         user: userData?.find(user => user?.userId == item?.feeRecipientId)?.userProfileDTO?.fullName || userData[0]?.userProfileDTO?.fullName || '',
//                         userObj: userData?.find(user => user?.userId == item?.feeRecipientId) || userData[0] || {},
//                         description: item?.description || '',
//                         // important fields
//                         awardedAmount: item?.amount,              // Awarded Amount
//                         contingencyRate: item?.rate || 0,          // Contingency %
//                         // Contingency * AwardedAmount / 100
//                         // tax fields
//                         tax: item?.taxPer || 0,
//                         taxObj: {},
//                         dataObj: item,
//                         selectedDate: moment(item?.billDate).format('YYYY-MM-DD') || '',
//                     }));
//                 })
//             }
//             if (res?.data?.matterBillingDTOList?.length > 0) {
//                 res?.data?.matterBillingDTOList?.forEach(item => {
//                     dispatch(addTimeEntry({
//                         id: Math.floor(Math.random() * 1000),
//                         dataObj: item,
//                         selectedDate: item.billDate || '',
//                         date: moment(item.billDate).format('YYYY-MM-DD') || '',
//                         user: userData?.find(user => user?.userId == item?.userId)?.userProfileDTO?.fullName || userData[0]?.userProfileDTO?.fullName || '',
//                         userObj: userData?.find(user => user?.userId == item?.userId) || userData[0] || {},
//                         description: item.description || '',
//                         duration: item.duration,
//                         totalDuration: getTotalDuration(item.duration) || '',
//                         hourlyRate: item.hourlyRate || 0,
//                         //tax
//                         tax: item.taxPer || 20,
//                         taxObj: {},
//                         taxAmount: item.taxPer || 20,
//                     }));
//                 })
//             }
//             if (res?.data?.matterBillExpenseDTOList?.length > 0) {
//                 res?.data?.matterBillExpenseDTOList?.forEach(item => {
//                     dispatch(addExpenseEntry({
//                         id: Math.floor(Math.random() * 1000),
//                         date: moment(item.createdOn).format('YYYY-MM-DD') || '',
//                         dataObj: item || {},
//                         //user
//                         user: userData?.find(user => user?.userId == item?.userId)?.userProfileDTO?.fullName || userData[0]?.userProfileDTO?.fullName || '',
//                         userObj: userData?.find(user => user?.userId == item?.userId) || userData[0] || {},
//                         description: item.description || '',
//                         hourlyRate: String(item.rate || 0) || 0,
//                         //tax
//                         tax: item.taxPer || 20,
//                         taxObj: {},
//                         taxAmount: item.taxRate || 20,
//                     }));
//                 })
//             }
//         }
//         else {
//             toast.show(err, { type: 'danger' })
//             console.log(err, "GET CUSTOMER RESPONSE===>err");
//         }
//     }
//     useEffect(() => {
//         getDefaultData()
//     }, [billingDetails])
//     const getMatterData = async () => {
//         const { res, err } = await httpRequest({
//             method: `get`,
//             path: `/ic/matter/listing`,
//             navigation: navigation
//         })
//         if (res) {
//             // console.log(res, "Matter DATA =======================================>");
//             setMatterSelected(res?.data?.find(item => item?.matterId === defaultData?.matterId)?.name)
//             setmatterData(res?.data);
//         }
//         else {
//             console.log(err, "GET CUSTOMER RESPONSE===>err");
//         }
//     }
//     const getToClientData = async () => {
//         setToClientLoader(true)
//         const { res, err } = await httpRequest({
//             method: `get`,
//             path: `/ic/matter/${billingDetails?.matterId}/client`,
//             navigation: navigation
//         })
//         if (res) {
//             // console.log(res, "GET TO CLEINT =======================================>", `/ic/matter/${clientId}/client`);
//             setToClientData(res?.data);
//             setToClientLoader(false)
//         }
//         else {
//             setToClientLoader(false)
//             console.log(err, "GET CUSTOMER RESPONSE===>err");
//         }
//     }
//     useEffect(() => {
//         getToClientData()
//     }, [clientId])
//     //get users 
//     useEffect(() => {
//         getUserData()
//         getMatterData()
//     }, [])
//     // const calculateAmounts = () => {
//     //     let subtotal = 0;
//     //     let totalTax = 0;
//     //     let netTotal = 0;
//     //     const allItems = [...(items || []), ...(expenseEntryItem || [])];
//     //     allItems.forEach(item => {
//     //         const duration = item?.totalDuration ?? 1; // If totalDuration not present (i.e., expense), assume 1
//     //         const rate = Number(item?.hourlyRate || 0);
//     //         const tax = Number(item?.taxAmount || 0);
//     //         subtotal += rate * duration;
//     //         // totalTax += (rate / 100) * tax;
//     //         totalTax += item?.taxAmount;
//     //     });
//     //     netTotal = subtotal + totalTax;
//     //     return { subtotal, totalTax, netTotal };
//     // };
//     // const { subtotal, totalTax, netTotal } = calculateAmounts();
//     const maaterSeelectedData = matterData?.find(item => item?.matterId === defaultData?.matterId)?.name
//     console.log(maaterSeelectedData, "maaterSeelecddddtdedData");
//     const validationSchema = Yup.object().shape({
//         title: Yup.string().required('title is required'),
//     })
//     const method = defaultData?.type || ''
//     const calculateAmounts = () => {
//         let subtotal = 0;
//         let totalTax = 0;
//         let netTotal = 0;
//         // const allItems = [
//         //     ...(items || []),            // time entries
//         //     ...(expenseEntryItem || []), // expenses
//         //     ...(fixedFeeItem || []),     // fixed fee
//         //     ...(contingencyFeeItem || []) // contingency fee ✅
//         // ];
//         let allItems = [];
//         // ✅ Method based items
//         switch (method) {
//             case "HOURLY":
//                 allItems = [...(items || []), ...(expenseEntryItem || [])];
//                 break;
//             case "FIXEDFEEDETAILS":
//                 allItems = [...(fixedFeeItem || []), ...(expenseEntryItem || [])];
//                 break;
//             case "CONTINGENCYFEEDEFAULTS":
//                 allItems = [...(contingencyFeeItem || []), ...(expenseEntryItem || [])];
//                 break;
//             default:
//                 allItems = [];
//                 break;
//         }
//         allItems?.forEach(item => {
//             if (item?.awardedAmount !== undefined && item?.contingencyRate !== undefined) {
//                 // ✅ Contingency fee calculation (based on awardedAmount & contingencyRate)
//                 //==========================================================>
//                 const awardedAmount = Number(item?.awardedAmount || 0);
//                 const contingencyRate = Number(item?.contingencyRate || 0);
//                 const amount = (awardedAmount * contingencyRate) / 100;
//                 const taxPercentage = 20;
//                 const lineTax = (amount * taxPercentage) / 100;
//                 subtotal += amount;
//                 totalTax += lineTax;
//             } else {
//                 // ✅ Time entry + Fixed fee + Expense case
//                 const rate = Number(item?.hourlyRate || 0);
//                 const taxPercentage = Number(item?.taxAmount || 0);
//                 const duration = item?.totalDuration !== undefined
//                     ? Number(item?.totalDuration)
//                     : null;
//                 const lineTotal = duration !== null ? rate * duration : rate;
//                 const lineTax = (lineTotal * taxPercentage) / 100;
//                 subtotal += lineTotal;
//                 totalTax += lineTax;
//             }
//         });
//         netTotal = subtotal + totalTax;
//         return { subtotal, totalTax, netTotal };
//     };
//     useEffect(() => {
//         calculateAmounts();
//     }, [items, expenseEntryItem, fixedFeeItem, contingencyFeeItem]);
//     const { subtotal, totalTax, netTotal } = calculateAmounts();
//     console.log(contingencyFeeItem, "contingencyFeeItem ^^^^^^^^^^^^^^^^^^^^^^^^^^^");
//     return (
//         <>
//             <Formik
//                 enableReinitialize
//                 initialValues={
//                     {
//                         // matterselect 
//                         matterSelected: matterSelected || '',
//                         matterSelectedObj: matterData?.find(item => item?.matterId === defaultData?.matterId) || {},
//                         isOpenMatterSelected: false,
//                         //start data/time
//                         isOpeninvDate: false,
//                         invDate: moment(defaultData?.invoiceDate).format('YYYY-MM-DD') || '',
//                         selectedinvDate: new Date(), // 👈 must be a Date object
//                         //end date/time
//                         isOpendueDate: false,
//                         dueDate: moment(defaultData?.dueDate).format('YYYY-MM-DD') || '',
//                         selecteddueDate: new Date(),
//                         //description
//                         description: defaultData?.matterDescription || '',
//                         //loader
//                         loader: false
//                     }
//                 }
//                 // validationSchema={validationSchema}
//                 onSubmit={async (values, { setFieldValue }) => {
//                     const mappedForContigency = contingencyFeeItem?.map((d, i) => {
//                         const awardedAmount = Number(d?.awardedAmount || 0);
//                         const contingencyRate = Number(d?.contingencyRate || 0); // percentage
//                         const amount = (awardedAmount * contingencyRate) / 100;
//                         const taxPercentage = 20;
//                         const taxTotal = ((amount * taxPercentage) / 100);
//                         const total = (amount + (amount * taxPercentage) / 100);
//                         return {
//                             createdOn: d?.dataObj?.createdOn,
//                             updatedOn: d?.dataObj?.updatedOn,
//                             createdBy: null,
//                             updatedBy: null,
//                             revision: null,
//                             matterBillAwardId: null,
//                             matterAwardId: d?.dataObj?.matterAwardId,
//                             billDate: new Date(d?.date).toISOString() || '',
//                             feeRecipientId: d?.dataObj?.feeRecipientId,
//                             description: d?.description || '',
//                             amount: awardedAmount,
//                             rate: Number(d?.contingencyRate),
//                             taxId: d?.dataObj?.taxId || 1,
//                             taxPer: taxPercentage,
//                             taxAmount: taxTotal,
//                             totalAmount: total
//                         }
//                     })
//                     const mappedFixFeeDetails = fixedFeeItem?.map((d, i) => {
//                         const rate = Number(d?.hourlyRate || 0);
//                         const taxPercentage = Number(d?.taxAmount || 0);
//                         // agar totalDuration available hai to timeEntry hai, warna fixed fee
//                         const duration = d?.totalDuration !== undefined ? Number(d?.totalDuration) : null;
//                         const lineTotal = duration !== null ? rate * duration : rate;
//                         const lineTax = (lineTotal * taxPercentage) / 100;
//                         const grandTotal = lineTotal + lineTax;
//                         return {
//                             amount: 0,
//                             billDate: new Date(d?.selectedDate).toISOString().replace('Z', '+05:00') || '',
//                             description: "",
//                             matterBillServiceItemId: d?.dataObj?.matterBillServiceItemId || null,
//                             matterServiceItemId: d?.serviceItemObj?.serviceItemId || null,
//                             rate: rate,
//                             taxAmount: lineTax,
//                             taxId: d?.dataObj?.taxId || 1,
//                             taxPer: taxPercentage || 20,
//                             totalAmount: lineTotal,
//                             userId: d?.userObj?.userId,
//                         }
//                     })
//                     const mappedData = expenseEntryItem?.map((d, i) => {
//                         console.log(d, "==========>ITRATION");
//                         return {
//                             createdOn: d?.dataObj?.createdOn || '',
//                             updatedOn: d?.dataObj?.createdOn || null,
//                             createdBy: userDetails?.userId || null,
//                             updatedBy: null,
//                             revision: null,
//                             matterBillExpenseId: d?.dataObj?.matterBillExpenseId || null,
//                             expEntryId: d?.dataObj?.expEntryId || null,
//                             expDate: moment(d?.date, 'MM/DD/YYYY').toISOString() || '',
//                             userId: d?.userObj?.userId || 0,
//                             description: d?.description || '',
//                             rate: d?.hourlyRate || null,
//                             taxRate: 0,
//                             quantity: 1,
//                             taxId: d?.taxObj?.taxId || 1,
//                             taxPer: Number(d?.taxAmount),
//                             taxAmount: (Number(d?.hourlyRate) / 100) * Number(d?.taxAmount) || 0,
//                             totalAmount: Number(d?.hourlyRate) || null,
//                         }
//                     })
//                     // HOURLY PAY KAM KRNA PARY GA ================ >
//                     const mappedMatterBillingDTOList = items?.map((d, i) => {
//                         console.log(d?.dataObj, "ITRATIOn");
//                         return {
//                             createdOn: d?.dataObj?.createdOn || null,
//                             updatedOn: d?.dataObj?.updatedOn || null,
//                             createdBy: userDetails?.userId || 0,
//                             updatedBy: null,
//                             revision: null,
//                             matterBillTimeId: d?.dataObj?.matterBillTimeId || null,
//                             matterTimeEntryId: d?.dataObj?.matterTimeEntryId || null,
//                             billDate: d?.selectedDate ? new Date(d?.selectedDate).toISOString().replace('Z', '+05:00') : null,
//                             userId: d?.userObj?.userId || 0,
//                             description: d?.description || '',
//                             duration: d?.duration,
//                             hourlyRate: d?.hourlyRate,
//                             // rate: d?.hourlyRate || 0,
//                             taxId: d?.taxObj?.taxId || 1,
//                             taxPer: Number(d?.taxAmount),
//                             taxAmount: Number(((d?.hourlyRate * d?.totalDuration) * d?.taxAmount) / 100) || 0,
//                             totalAmount: (d?.hourlyRate * d?.totalDuration) || 0,
//                             // nonBillable: false,
//                             // visibleBill: false
//                         }
//                     })
//                     // console.log(defaultData, "MATTER");
//                     const payload = {
//                         createdOn: defaultData?.createdOn || null,
//                         updatedOn: defaultData?.updatedOn || null,
//                         createdBy: userDetails?.userId || 0,
//                         updatedBy: userDetails?.userId || 0,
//                         revision: null,
//                         matterBillId: defaultData?.matterBillId || null,
//                         //New
//                         matterName: null,
//                         balance: netTotal || 0,
//                         paymentDate: null,
//                         code: defaultData?.code || null,
//                         dueDate: new Date(values.selecteddueDate).toISOString() || '' || "",
//                         invoiceDate: new Date(values.selecteddueDate).toISOString() || '' || "",
//                         matterId: values?.matterSelectedObj?.matterId || 0,
//                         matterDescription: values?.description || '',
//                         subTotal: subtotal || 0,
//                         taxTotal: totalTax || 0,
//                         netTotal: netTotal || 0,
//                         paidTotal: 0,
//                         status: "UNPAID",
//                         matterBillingDTOList: mappedMatterBillingDTOList?.length > 0 ? mappedMatterBillingDTOList : null,
//                         matterBillAwardDTOList: mappedForContigency?.length > 0 ? mappedForContigency : null,
//                         matterBillServiceItemDTOList: mappedFixFeeDetails?.length > 0 ? mappedFixFeeDetails : null,
//                         matterBillExpenseDTOList: mappedData?.length > 0 ? mappedData : null,
//                         clientIds: toClientData?.map(item => item?.clientId).join(",") || "",
//                         type: method || "HOURLY"
//                     }
//                     console.log(payload, '=======================ddd=====>Payload');
//                     const { res, err } = await httpRequest({
//                         method: "put",
//                         path: "/ic/matter/bill/",
//                         params: payload,
//                         header: { "Content-Type": "application/json" },
//                         navigation
//                     });
//                     if (res) {
//                         toast.show('Billing created successfully', { type: 'success' })
//                         navigation.goBack()
//                     }
//                     else {
//                         console.log("err", err);
//                     }
//                 }}
//             >
//                 {({ handleChange, handleBlur, handleSubmit, values, errors, touched, setFieldValue }) => (
//                     <>
//                         <ScreenHeader isLoading={values?.loader} onPressSave={handleSubmit} isShowSave={true} extraStyle={{ backgroundColor: '#F5F6F8' }} isGoBack={true} onPress={() => {
//                             navigation.goBack()
//                             dispatch(resetTimeEntries(null))
//                             dispatch(resetExpenseEntries(null))
//                         }} isShowTitle={true} title="Edit Billing" />
//                         <Wrapper>
//                             <KeyboardAvoidingView
//                                 style={{ flex: 1 }}
//                                 behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
//                                 keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0} // adjust as needed
//                             >
//                                 <ScrollView
//                                     contentContainerStyle={{ paddingBottom: 50 }}
//                                     keyboardShouldPersistTaps="handled"
//                                     showsVerticalScrollIndicator={false}
//                                 >
//                                     {/* <MyText>{values?.matterSelected}</MyText> */}
//                                     {/* ==========================================================================================> NEW  */}
//                                     <TextInputWithTitle
//                                         editable={false}
//                                         title="Matter"
//                                         isButton={true}
//                                         // isRequired={true}
//                                         buttonText={values.matterSelected ? values.matterSelected : 'Select Matter'}
//                                         onPressButton={() => setFieldValue('isOpenMatterSelected', true)}
//                                     />
//                                     {
//                                         errors.matterSelected && touched.matterSelected && (
//                                             <MyText style={{ color: 'red' }}>{errors.matterSelected}</MyText>
//                                         )
//                                     }
//                                     <View style={{ marginVertical: 10 }}>
//                                         <MyText style={styles.btnTextStyle}>To</MyText>
//                                         {
//                                             toClientLoader ? <LoaderKitView
//                                                 style={{ width: 30, height: 30 }}
//                                                 name={'BallPulse'}
//                                                 animationSpeedMultiplier={1.0} // speed up/slow down animation, default: 1.0, larger is faster
//                                                 color={COLORS?.LIGHT_COLOR} // Optional: color can be: 'red', 'green',... or '#ddd', '#ffffff',...
//                                             /> :
//                                                 toClientData.map((d, i) => {
//                                                     const imageURL = `data:image/jpeg;base64,${d?.photo || ''}`;
//                                                     return (
//                                                         <>
//                                                             <View key={i} style={{ marginVertical: 10, flexDirection: "row", gap: 10 }}>
//                                                                 {d?.photo ?
//                                                                     <View>
//                                                                         <Image source={{ uri: imageURL }} style={{ height: 35, width: 35, borderRadius: 30 }} />
//                                                                     </View>
//                                                                     : <View style={{ height: 35, width: 35, backgroundColor: COLORS?.PRIMARY_COLOR_LIGHT, justifyContent: "center", alignItems: "center", borderRadius: 30 }}>
//                                                                         {d?.companyName ?
//                                                                             <MyText style={{ color: COLORS?.whiteColors }}>{d?.companyName?.split('')[0]}</MyText> : <MyText style={{ color: COLORS?.whiteColors }}>{d?.firstName?.split('')[0] + '' + d?.lastName?.split('')[0]}</MyText>}
//                                                                     </View>}
//                                                                 <View>
//                                                                     <MyText style={{ fontWeight: 'bold' }}>{d?.companyName ? d?.companyName : d?.firstName + ' ' + d?.lastName}</MyText>
//                                                                     {d?.clientAddresseDTOList?.length > 0 && d?.clientAddresseDTOList[0]?.city && d?.clientAddresseDTOList[0]?.country && <MyText>{d?.clientAddresseDTOList[0]?.city + ', ' + d?.clientAddresseDTOList[0]?.country}</MyText>}
//                                                                     {d?.clientEmailAddressDTOList?.length > 0 && d?.clientEmailAddressDTOList[0]?.email && <MyText>{d?.clientEmailAddressDTOList[0]?.email}</MyText>}
//                                                                     {d?.clientPhoneNumberDTOList?.length > 0 && d?.clientPhoneNumberDTOList[0]?.phoneNo && <MyText>{d?.clientPhoneNumberDTOList[0]?.phoneNo}</MyText>}
//                                                                 </View>
//                                                             </View>
//                                                         </>
//                                                     )
//                                                 })
//                                         }
//                                     </View>
//                                     <TextInputWithTitle title='Description' value={values.description} onChangeText={(txt) => setFieldValue('description', txt)} placeholder={'Description'} />
//                                     <TextInputWithTitle
//                                         title="Invoice Date "
//                                         isButton={true}
//                                         // isRequired={true}
//                                         buttonText={values.invDate || 'Select Invoice Date'}
//                                         onPressButton={() => setFieldValue('isOpeninvDate', true)}
//                                     />
//                                     <TextInputWithTitle
//                                         title="Due Date "
//                                         isButton={true}
//                                         isRequired={true}
//                                         buttonText={values.dueDate || 'Select Due Date'}
//                                         onPressButton={() => setFieldValue('isOpendueDate', true)}
//                                     />
//                                     {
//                                         // selectedMatter?.matterBillingDTOList?.length > 0 &&
//                                         (
//                                             method == "HOURLY" ?
//                                                 <View style={{ marginVertical: 10 }}>
//                                                     <MyText style={[styles.btnTextStyle, { fontSize: calculatefontSize(2) }]}>Time Entries</MyText>
//                                                     <MyText style={{ fontSize: calculatefontSize(1.4) }}>Any modifications made to the current time entries will be updated in the matter.
//                                                     </MyText>
//                                                     <View style={{ borderBottomWidth: 1, borderColor: COLORS?.LIGHT_COLOR, marginVertical: 10, }}>
//                                                         {
//                                                             items?.map((item, index) => {
//                                                                 return (
//                                                                     <>
//                                                                         <BillingTimeEntry item={item} index={index} navigation={navigation} />
//                                                                     </>
//                                                                 )
//                                                             })
//                                                         }
//                                                         <AddButton onPress={() => dispatch(addTimeEntry({
//                                                             id: Math.floor(Math.random() * 1000),
//                                                         }))} title='Add a time entry' />
//                                                     </View>
//                                                 </View>
//                                                 :
//                                                 method == "CONTINGENCYFEEDEFAULTS" ?
//                                                     <View style={{ marginVertical: 10 }}>
//                                                         <MyText style={[styles.btnTextStyle, { fontSize: calculatefontSize(2) }]}>Contingency Fee
//                                                         </MyText>
//                                                         <MyText style={{ fontSize: calculatefontSize(1.4) }}>Any modifications made to the current fee entries will be updated in the matter.
//                                                         </MyText>
//                                                         <View style={{ borderBottomWidth: 1, borderColor: COLORS?.LIGHT_COLOR, marginVertical: 10, }}>
//                                                             {
//                                                                 contingencyFeeItem?.map((item, index) => {
//                                                                     return (
//                                                                         <>
//                                                                             <ContingencyFeeDetails item={item} index={index} navigation={navigation} />
//                                                                         </>
//                                                                     )
//                                                                 })
//                                                             }
//                                                             <AddButton onPress={() => dispatch(addContingencyFee({
//                                                                 id: Math.floor(Math.random() * 1000),
//                                                             }))} title='Add a Contingency fee entry' />
//                                                         </View>
//                                                     </View>
//                                                     :
//                                                     <View style={{ marginVertical: 10 }}>
//                                                         <MyText style={[styles.btnTextStyle, { fontSize: calculatefontSize(2) }]}>Fixed Fee Detail</MyText>
//                                                         <MyText style={{ fontSize: calculatefontSize(1.4) }}>Any modifications made to the current time entries will be updated in the matter.
//                                                         </MyText>
//                                                         <View style={{ borderBottomWidth: 1, borderColor: COLORS?.LIGHT_COLOR, marginVertical: 10, }}>
//                                                             {
//                                                                 fixedFeeItem?.map((item, index) => {
//                                                                     return (
//                                                                         <>
//                                                                             <FixedFeeDetails item={item} index={index} navigation={navigation} />
//                                                                         </>
//                                                                     )
//                                                                 })
//                                                             }
//                                                             <AddButton onPress={() => dispatch(addFixedFee({
//                                                                 id: Math.floor(Math.random() * 1000),
//                                                             }))} title='Add a fixed fee entry' />
//                                                         </View>
//                                                     </View>)
//                                     }
//                                     {/* //item =====================================> */}
//                                     <View style={{ marginVertical: 10 }}>
//                                         <MyText style={[styles.btnTextStyle, { fontSize: calculatefontSize(2) }]}>Expense Entries</MyText>
//                                         <MyText style={{ fontSize: calculatefontSize(1.4) }}>Update to the existing expense entries will be applied to the matter.
//                                         </MyText>
//                                         <View style={{ borderBottomWidth: 1, borderColor: COLORS?.LIGHT_COLOR, marginVertical: 10, }}>
//                                             {
//                                                 expenseEntryItem?.map((item, index) => {
//                                                     return (
//                                                         <>
//                                                             <BillingExpenseEntry item={item} index={index} navigation={navigation} />
//                                                         </>
//                                                     )
//                                                 })
//                                             }
//                                             <AddButton onPress={() => dispatch(addExpenseEntry({
//                                                 id: Math.floor(Math.random() * 1000),
//                                             }))} title='Add a time entry' />
//                                         </View>
//                                     </View>
//                                     <View style={{ alignItems: "flex-end", backgroundColor: COLORS?.BORDER_LIGHT_COLOR, padding: 10 }}>
//                                         <View style={{ width: "40%", flexDirection: "row", justifyContent: "space-between", marginVertical: 5 }}>
//                                             <MyText style={{ fontWeight: "bold" }}>Subtotal :</MyText>
//                                             <MyText >£ {formatNumber(subtotal)}</MyText>
//                                         </View>
//                                         <View style={{ width: "40%", flexDirection: "row", justifyContent: "space-between", marginVertical: 5 }}>
//                                             <MyText style={{ fontWeight: "bold" }}>Tax Amount :</MyText>
//                                             <MyText >£ {formatNumber(totalTax)}</MyText>
//                                         </View>
//                                         <View style={{ width: "40%", flexDirection: "row", justifyContent: "space-between", marginVertical: 5 }}>
//                                             <MyText style={{ fontWeight: "bold" }}>Net Total :</MyText>
//                                             <MyText >£ {formatNumber(netTotal)}</MyText>
//                                         </View>
//                                     </View>
//                                     <View style={{ height: 20 }} />
//                                 </ScrollView>
//                             </KeyboardAvoidingView>
//                             {/* MODAL ======================================================================> */}
//                             <BottomModalListWithSearch
//                                 onClose={() => setFieldValue('isOpenMatterSelected', false)}
//                                 renderItem={({ item }) => (
//                                     <TouchableOpacity
//                                         onPress={() => {
//                                             setClientId(item?.matterId);
//                                             setMatterSelected(item?.name);
//                                             setFieldValue('matterSelected', item?.name);
//                                             setFieldValue('matterSelectedObj', item);
//                                             setFieldValue('isOpenMatterSelected', false)
//                                         }}
//                                         style={styles.itemStyle}
//                                     >
//                                         <MyText style={{ fontSize: calculatefontSize(1.9) }}>
//                                             {item?.name}
//                                         </MyText>
//                                     </TouchableOpacity>
//                                 )}
//                                 visible={values?.isOpenMatterSelected}
//                                 data={matterData}
//                                 searchKey="name"
//                             />
//                             {/* //PICKER ============================> */}
//                             {/* //select start date and time  */}
//                             <DatePicker
//                                 modal
//                                 mode='datetime'
//                                 open={values.isOpeninvDate}
//                                 date={values.selectedinvDate || new Date()}
//                                 onConfirm={date => {
//                                     setFieldValue('invDate', `${moment(date).format('MM/DD/YYYY')} : ${moment(date).format('hh:mm A')}`);
//                                     setFieldValue('selectedinvDate', date); // ✅ keep as Date object
//                                     setFieldValue('isOpeninvDate', false);
//                                 }}
//                                 onCancel={() => {
//                                     setFieldValue('isOpeninvDate', false);
//                                 }}
//                             />
//                             <DatePicker
//                                 modal
//                                 mode='datetime'
//                                 open={values.isOpendueDate}
//                                 date={values.selecteddueDate || new Date()}
//                                 onConfirm={date => {
//                                     setFieldValue('dueDate', `${moment(date).format('MM/DD/YYYY')} : ${moment(date).format('hh:mm A')}`);
//                                     setFieldValue('selecteddueDate', date); // ✅ keep as Date object
//                                     setFieldValue('isOpendueDate', false);
//                                 }}
//                                 onCancel={() => {
//                                     setFieldValue('isOpendueDate', false);
//                                 }}
//                             />
//                         </Wrapper>
//                     </>
//                 )}
//             </Formik>
//         </>
//     )
// }
// export default EditBilling
// const styles = StyleSheet.create({
//     title: {
//         fontSize: calculatefontSize(2),
//         // fontFamily:fontFamily.Bold,
//         // fontWeight: "bold",
//         color: COLORS.GREY_COLOR,
//     },
//     label: {
//         color: '#627585',
//         // marginBottom: 5,
//         fontWeight: '600',
//     },
//     itemStyle: {
//         borderBottomWidth: 1,
//         paddingVertical: 10,
//         borderColor: COLORS?.BORDER_LIGHT_COLOR
//     },
//     itemContainer: {
//         flexDirection: 'row',
//         justifyContent: 'space-between',
//         alignItems: 'center',
//         padding: 10,
//         marginBottom: 5,
//         backgroundColor: '#f0f0f0',
//         width: '100%',
//         borderRadius: 5,
//     },
//     btnTextStyle: {
//         fontSize: calculatefontSize(1.9),
//         fontWeight: '600',
//         bottom: 10,
//         color: COLORS?.PRIMARY_COLOR_LIGHT
//     },
// })